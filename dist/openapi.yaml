openapi: 3.0.0
info:
  title: Busa's Recipes
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has been successfully logged out"
  /home:
    get:
      tags:
      - Auth
      summary: The home page of Busa's Recipes
      description: shows the home page with 3 random recipes on the left and 3 last seen recipes of the logged in on the right.
      operationId: homeBusaPage
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
      security:
      - cookieAuth: []
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/show_details/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return Full details on recipe by his ID
      description: Return Full details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
        "404":
          description: recipeId is not exists
  /recipes/search:
    get:
      tags:
      - Recipes
      summary: search page for recipes
      description: "given a recipe name and an option to add cuisines, diets and intolerances show the recipes"
      operationId: recipeSearch
      parameters:
      - name: recipeName
        in: query
        description: name of the Recipe
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: cuisine
        in: query
        description: cuisine of the Recipe
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: diet
        in: query
        description: diet of the Recipe
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: intolerance
        in: query
        description: intolerance of the Recipe
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: amount
        in: query
        description: the amount of results for the search to return
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Recipe's details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "400":
          description: bad request
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        wasWatched:
          type: boolean
          description: indication if the recipe was watched by logged in user
        savedToFavourites:
          type: boolean
          description: indication if the recipe was saved to user's favourites
    FullRecipe:
      required:
      - recipePreview
      - ingredients
      - instructions
      - servings
      type: object
      properties:
        recipePreview:
          $ref: '#/components/schemas/RecipePreview'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: string
          description: the instructions of making the recipe
        servings:
          type: number
          description: the number of the servings of the recipe
    Ingredient:
      required:
      - ingredientName
      - quantity
      type: object
      properties:
        ingredientName:
          type: string
          description: the name of the ingredient
          example: butter
        quantity:
          type: string
          description: the quantity of the ingredient in the recipe and the unit
          format: <quantity> <units>
          example: 1 tbsp